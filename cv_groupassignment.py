# -*- coding: utf-8 -*-
"""cv_groupassignment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rW9sbal-6mGMFbqyX7nbyC8lqDpmvVZz
"""

import cv2
import numpy as np
from google.colab import files
import matplotlib.pyplot as plt

image = None  # Initialize the image variable

while True:
    print("Menu:")
    print("1. Upload Image")
    print("2. Perform Translation")
    print("3. Perform Rotation")
    print("4. Perform Scaling")
    print("5. Perform Shearing")
    print("6. Exit")

    choice = input("Enter your choice: ")

    if choice == '1':
        uploaded = files.upload()
        if uploaded:
            # Use the first uploaded file
            input_image_filename = list(uploaded.keys())[0]
            image = cv2.imread(input_image_filename)

            if image is not None:
                print("Image uploaded successfully.")
            else:
                print("Error loading the image. Please try again.")

    elif choice == '2':
        if image is None:
            print("Please upload an image first.")
            continue

        # Define the translation matrix
        translation_matrix = np.float32([[1, 0, 50], [0, 1, 50]])

        # Apply the translation
        translated_image = cv2.warpAffine(image, translation_matrix, (image.shape[1], image.shape[0]))

        # Display the translated image using Matplotlib
        plt.imshow(cv2.cvtColor(translated_image, cv2.COLOR_BGR2RGB))
        plt.axis('off')
        plt.show()

    elif choice == '3':
        if image is None:
            print("Please upload an image first.")
            continue

        # Define the rotation angle
        angle = 30  # Degrees

        # Calculate the image's center point
        center = (image.shape[1] // 2, image.shape[0] // 2)

        # Rotate the image
        rotation_matrix = cv2.getRotationMatrix2D(center, angle, 1)
        rotated_image = cv2.warpAffine(image, rotation_matrix, (image.shape[1], image.shape[0]))

        # Display the rotated image using Matplotlib
        plt.imshow(cv2.cvtColor(rotated_image, cv2.COLOR_BGR2RGB))
        plt.axis('off')
        plt.show()

    elif choice == '4':
        if image is None:
            print("Please upload an image first.")
            continue

        # Define the scaling factors
        scaling_factor_x = 2
        scaling_factor_y = 0.5

        # Compute the scaling matrix
        scaling_matrix = np.float32([[scaling_factor_x, 0, 0], [0, scaling_factor_y, 0]])

        # Apply the scaling
        scaled_image = cv2.warpAffine(image, scaling_matrix, (image.shape[1], image.shape[0]))

        # Display the scaled image using Matplotlib
        plt.imshow(cv2.cvtColor(scaled_image, cv2.COLOR_BGR2RGB))
        plt.axis('off')
        plt.show()

    elif choice == '5':
        if image is None:
            print("Please upload an image first.")
            continue

        # Define the shearing matrix
        shearing_matrix = np.float32([[1, 0.5, 0], [0.5, 1, 0]])

        # Apply the shearing
        sheared_image = cv2.warpAffine(image, shearing_matrix, (image.shape[1], image.shape[0]))

        # Display the sheared image using Matplotlib
        plt.imshow(cv2.cvtColor(sheared_image, cv2.COLOR_BGR2RGB))
        plt.axis('off')
        plt.show()

    elif choice == '6':
        print("Exiting the program.")
        break

    else:
        print("Invalid choice. Please select a valid option.")